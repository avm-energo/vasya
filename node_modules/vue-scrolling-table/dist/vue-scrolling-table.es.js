import { defineComponent, useCssVars, ref, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, withModifiers, renderSlot, createCommentVNode } from "vue";
var VueScrollingTable_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = ["onDragover"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  props: {
    deadAreaColor: { type: String, required: false, default: "#CCC" },
    includeFooter: { type: Boolean, required: false, default: false },
    syncHeaderScroll: { type: Boolean, required: false, default: true },
    syncFooterScroll: { type: Boolean, required: false, default: true },
    scrollHorizontal: { type: Boolean, required: false, default: true },
    scrollVertical: { type: Boolean, required: false, default: true }
  },
  emits: ["header-dragenter", "header-dragover", "header-drop", "scroll"],
  setup(__props, { emit }) {
    const props = __props;
    useCssVars((_ctx) => ({
      "5ba96d6b": __props.deadAreaColor
    }));
    const onDragEnterHeader = (e) => emit("header-dragenter", e);
    const onDragOverHeader = (e) => emit("header-dragover", e);
    const onDropHeader = (e) => emit("header-drop", e);
    const table = ref(null);
    const tbody = ref(null);
    const thead = ref(null);
    const tfoot = ref(null);
    const updateSyncedScroll = () => {
      const l = tbody.value.scrollLeft;
      if (props.scrollHorizontal) {
        if (props.syncHeaderScroll && thead.value.scrollLeft !== l) {
          thead.value.scrollLeft = l;
        }
        if (props.includeFooter && props.syncFooterScroll && tfoot.value.scrollLeft !== l) {
          tfoot.value.scrollLeft = l;
        }
      }
      emit("scroll", tbody.value.scrollTop, l, tbody.value.scrollHeight, tbody.value.scrollWidth);
    };
    onMounted(() => {
      updateSyncedScroll();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("table", {
        ref_key: "table",
        ref: table,
        class: normalizeClass(["scrolling", { scrolly: __props.scrollVertical, scrollx: __props.scrollHorizontal }])
      }, [
        createElementVNode("thead", {
          name: "thead",
          ref_key: "thead",
          ref: thead,
          class: normalizeClass({ scrollsync: __props.syncHeaderScroll, "scroll-vertical": __props.scrollVertical }),
          onDragenter: onDragEnterHeader,
          onDragover: withModifiers(onDragOverHeader, ["prevent"]),
          onDrop: onDropHeader
        }, [
          renderSlot(_ctx.$slots, "thead")
        ], 42, _hoisted_1),
        createElementVNode("tbody", {
          name: "tbody",
          ref_key: "tbody",
          ref: tbody,
          onScrollPassive: updateSyncedScroll
        }, [
          renderSlot(_ctx.$slots, "tbody")
        ], 544),
        __props.includeFooter ? (openBlock(), createElementBlock("tfoot", {
          key: 0,
          name: "tfoot",
          ref_key: "tfoot",
          ref: tfoot,
          class: normalizeClass({ scrollsync: __props.syncFooterScroll, "scroll-vertical": __props.scrollVertical })
        }, [
          renderSlot(_ctx.$slots, "tfoot")
        ], 2)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export { _sfc_main as default };
